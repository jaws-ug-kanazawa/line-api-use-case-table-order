# Stack:LINE-UseCase-TableOrder
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  UseCase-TableOrder-Backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: !FindInMap [EnvironmentMap, !Ref Environment, LambdaMemorySize]

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev

Mappings:
  EnvironmentMap:
    dev:
      LineChannelId: LineChannelId
      LIFFChannelId: LIFFChannelId
      LiffUrl: https://liff.line.me/xxxxxxxxx-xxxxxxxxx
      PayPayApiKey: PayPayApiKey
      PayPayApiSecret: PayPayApiSecret
      PayPayApiMerchantId: PayPayApiMerchantId
      PayPayIsProd: False
      FrontS3BucketName: S3 Name for FrontEnd
      ItemListDBName: ItemListDB
      PaymentInfoDBName: PaymentInfoDB
      LINEChannelAccessTokenDBName: LINEChannelAccessTokenDBTableOrderDev
      LayerVersion: 1
      LoggerLevel: DEBUG
      LambdaMemorySize: 128
      LinePayChannelId: LinePayChannelId
      LinePayChannelSecret: LinePayChannelSecret
      LinePayIsSandbox: True
      # TTL is True:Reservation Data will be deleted at the specified date, False:Data will not be deleted
      TTL: False
      # Set day to delete data
      # If you set TTL: True, data will be deleted in the period specified below.
      TTLDay: 10
      # ### ACCESS LOG SETTING ###
      # LogS3Bucket: S3BucketName for AccessLog
      # LogFilePrefix: tableorder-sample/
      # ### ACCESS LOG SETTING ###
    prod:
      LineChannelId: LineChannelId
      LIFFChannelId: LIFFChannelId
      LiffUrl: LIFF URL
      LinePayChannelId: LinePayChannelId
      LinePayChannelSecret: LinePayChannelSecret
      LinePayIsSandbox: True or False
      PayPayApiKey: PayPayApiKey
      PayPayApiSecret: PayPayApiSecret
      PayPayApiMerchantId: PayPayApiMerchantId
      PayPayIsProd: True or False
      ItemListDBName: ItemListDBName
      PaymentInfoDBName: PaymentInfoDBName
      LINEChannelAccessTokenDBName: LINEChannelAccessTokenDBTableOrderProd
      FrontS3BucketName: S3 Name for FrontEnd
      LayerVersion: Layer Version
      LoggerLevel: INFO or DEBUG
      LambdaMemorySize: 128 to 3008
      TTL: False or True
      TTLDay: Data Delete Day
      # ### ACCESS LOG SETTING ###
      # LogS3Bucket: S3BucketName for AccessLog
      # LogFilePrefix: tableorder-sample/
      # ### ACCESS LOG SETTING ###

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TableOrder-*:*:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TableOrder-*:*"
                  - !GetAtt TableOrderItemList.Arn
                  - !GetAtt PaymentOrderInfo.Arn
                  - !Sub ${PaymentOrderInfo.Arn}/index/*
                  - !Join
                    - ""
                    - - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/
                      - !FindInMap [
                          EnvironmentMap,
                          !Ref Environment,
                          LINEChannelAccessTokenDBName,
                        ]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: "*"
      RoleName: !Sub "${AWS::StackName}-LambdaRole"

  CategoryGet:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: category_get.lambda_handler
      Runtime: python3.8
      CodeUri: category_get/
      FunctionName: !Sub TableOrder-CategoryGet-${Environment}
      Description: ""
      Timeout: 3
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          ITEM_LIST_DB: !Ref TableOrderItemList
      Tags:
        Name: LINE
        App: TableOrder
      Events:
        CategoryGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /category_get
            Method: get
            RestApiId:
              Ref: TableOrderApiGateway
  ItemListGet:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: item_list_get.lambda_handler
      Runtime: python3.8
      CodeUri: item_list_get/
      FunctionName: !Sub TableOrder-ItemListGet-${Environment}
      Description: ""
      Timeout: 3
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          ITEM_LIST_DB: !Ref TableOrderItemList
      Tags:
        Name: LINE
        App: TableOrder
      Events:
        ItemListGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /item_list_get
            Method: get
            RestApiId:
              Ref: TableOrderApiGateway
  OrderPut:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: order_put.lambda_handler
      Runtime: python3.8
      CodeUri: order_put/
      FunctionName: !Sub TableOrder-OrderPut-${Environment}
      Description: ""
      Timeout: 3
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LIFF_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LIFFChannelId]
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          ITEM_LIST_DB: !Ref TableOrderItemList
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
      Tags:
        Name: LINE
        App: TableOrder
      Events:
        OrderPut:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /order_put
            Method: post
            RestApiId:
              Ref: TableOrderApiGateway
  OrderInfoGet:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: order_info_get.lambda_handler
      Runtime: python3.8
      CodeUri: order_info_get/
      FunctionName: !Sub TableOrder-OrderInfoGet-${Environment}
      Description: ""
      Timeout: 3
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
      Tags:
        Name: LINE
        App: TableOrder
      Events:
        OrderInfoGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /order_info_get
            Method: get
            RestApiId:
              Ref: TableOrderApiGateway
  Reserve:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: payment_reserve/
      FunctionName: !Sub TableOrder-PaymentReserve-${Environment}
      Handler: reserve.lambda_handler
      Runtime: python3.8
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LIFF_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LIFFChannelId]
          LINE_PAY_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelId]
          LINE_PAY_CHANNEL_SECRET:
            !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelSecret]
          LINE_PAY_IS_SANDBOX:
            !FindInMap [EnvironmentMap, !Ref Environment, LinePayIsSandbox]
          CONFIRM_URL: !Sub https://${CloudFrontDistribution.DomainName}/tableorder/paymentCompleted
          CANCEL_URL: !Sub https://${CloudFrontDistribution.DomainName}/tableorder/
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
      Events:
        ReservePayment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /payment_reserve
            Method: post
            RestApiId:
              Ref: TableOrderApiGateway
  Confirm:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: payment_confirm/
      FunctionName: !Sub TableOrder-PaymentConfirm-${Environment}
      Handler: confirm.lambda_handler
      Runtime: python3.8
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LIFF_URL: !FindInMap [EnvironmentMap, !Ref Environment, LiffUrl]
          LINE_PAY_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelId]
          LINE_PAY_CHANNEL_SECRET:
            !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelSecret]
          LINE_PAY_IS_SANDBOX:
            !FindInMap [EnvironmentMap, !Ref Environment, LinePayIsSandbox]
          LINE_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LineChannelId]
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          TTL_DAY: !FindInMap [EnvironmentMap, !Ref Environment, TTLDay]
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
          CHANNEL_ACCESS_TOKEN_DB:
            !FindInMap [
              EnvironmentMap,
              !Ref Environment,
              LINEChannelAccessTokenDBName,
            ]
      Events:
        ConfirmPayment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /payment_confirm
            Method: post
            RestApiId:
              Ref: TableOrderApiGateway
  ConfirmNoLinepay:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: payment_confirm_nolinepay/
      FunctionName: !Sub TableOrder-PaymentConfirmNolinepay-${Environment}
      Handler: confirm_nolinepay.lambda_handler
      Runtime: python3.8
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          TTL_DAY: !FindInMap [EnvironmentMap, !Ref Environment, TTLDay]
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
      Events:
        ConfirmPayment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /confirm_nolinepay
            Method: post
            RestApiId:
              Ref: TableOrderApiGateway
  CreateQRCode:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: payment_create_qr_code/
      FunctionName: !Sub TableOrder-PaymentCreateQRCode-${Environment}
      Handler: create_qr_code.lambda_handler
      Runtime: python3.8
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LIFF_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LIFFChannelId]
          PAY_PAY_API_KEY:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayApiKey]
          PAY_PAY_API_SECRET:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayApiSecret]
          PAY_PAY_API_MERCHANT_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayApiMerchantId]
          PAY_PAY_IS_PROD:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayIsProd]
          REDIRECT_URL:
            !FindInMap [EnvironmentMap, !Ref Environment, LiffUrl]
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
      Events:
        ReservePayment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /payment_create_qr_code
            Method: post
            RestApiId:
              Ref: TableOrderApiGateway
  GetPaymentDetails:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: payment_get_payment_details/
      FunctionName: !Sub TableOrder-GetPaymentDetails-${Environment}
      Handler: get_payment_details.lambda_handler
      Runtime: python3.8
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LIFF_URL: !FindInMap [EnvironmentMap, !Ref Environment, LiffUrl]
          LINE_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LineChannelId]
          PAY_PAY_API_KEY:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayApiKey]
          PAY_PAY_API_SECRET:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayApiSecret]
          PAY_PAY_API_MERCHANT_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayApiMerchantId]
          PAY_PAY_IS_PROD:
            !FindInMap [EnvironmentMap, !Ref Environment, PayPayIsProd]
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          TTL_DAY: !FindInMap [EnvironmentMap, !Ref Environment, TTLDay]
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
          CHANNEL_ACCESS_TOKEN_DB:
            !FindInMap [
              EnvironmentMap,
              !Ref Environment,
              LINEChannelAccessTokenDBName,
            ]
      Events:
        ConfirmPayment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /payment_get_payment_details
            Method: post
            RestApiId:
              Ref: TableOrderApiGateway
  PaymentIdGet:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: payment_id_get.lambda_handler
      Runtime: python3.8
      CodeUri: payment_id_get/
      FunctionName: !Sub TableOrder-PaymentIdGet-${Environment}
      Description: ""
      Timeout: 3
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue TableOrderLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LIFF_CHANNEL_ID:
            !FindInMap [EnvironmentMap, !Ref Environment, LIFFChannelId]
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          PAYMENT_ORDER_DB: !Ref PaymentOrderInfo
      Tags:
        Name: LINE
        App: TableOrder
      Events:
        PaymentIdGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /payment_id_get
            Method: get
            RestApiId:
              Ref: TableOrderApiGateway

  TableOrderItemList:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: categoryId
          AttributeType: N
      KeySchema:
        - AttributeName: categoryId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, ItemListDBName]
      Tags:
        - Key: "Name"
          Value: "LINE"
        - Key: "App"
          Value: "TableOrder"
  PaymentOrderInfo:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: S
        - AttributeName: "paymentId"
          AttributeType: S
        - AttributeName: "transactionId"
          AttributeType: N
      TableName:
        !FindInMap [EnvironmentMap, !Ref Environment, PaymentInfoDBName]
      KeySchema:
        - AttributeName: "paymentId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: userId-index
          KeySchema:
            - AttributeName: "userId"
              KeyType: "HASH"
            - AttributeName: "transactionId"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "paymentId"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: "expirationDate"
        # True:Reservation Data will be deleted at the specified date, False:Data will not be deleted
        Enabled: !FindInMap [EnvironmentMap, !Ref Environment, TTL]
      Tags:
        - Key: "Name"
          Value: "LINE"
        - Key: "App"
          Value: "TableOrder"

  TableOrderApiGateway:
    Properties:
      StageName: !Ref Environment
      OpenApiVersion: 3.0.2
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Origin, Authorization, Accept, X-Requested-With, Content-Type, x-amz-date, X-Amz-Security-Token'"
        AllowMethods: "'GET, POST, OPTIONS'"
    Type: AWS::Serverless::Api
    Tags:
      - Key: "Name"
        Value: "LINE"
      - Key: "App"
        Value: "TableOrder"

  FrontBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !FindInMap [EnvironmentMap, !Ref Environment, FrontS3BucketName]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
  # ### ACCESS LOG SETTING ###
  #     LoggingConfiguration:
  #       DestinationBucketName: !Ref AccessLogBucket
  #       LogFilePrefix:
  #         !FindInMap [EnvironmentMap, !Ref Environment, LogFilePrefix]
  # AccessLogBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !FindInMap [EnvironmentMap, !Ref Environment, LogS3Bucket]
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: True
  #       BlockPublicPolicy: True
  #       IgnorePublicAcls: True
  #       RestrictPublicBuckets: True
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: "AES256"
  #     AccessControl: LogDeliveryWrite
  # ### ACCESS LOG SETTING ###

  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontBucket
      PolicyDocument:
        Version: "2008-10-17"
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Action: s3:GetObject
            Sid: 1
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${FrontBucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Condition:
              Bool:
                "aws:SecureTransport": "true"
          - Action: s3:*
            Sid: 2
            Effect: Deny
            Principal: "*"
            Resource: !Sub arn:aws:s3:::${FrontBucket}
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub "${FrontBucket}.s3.${AWS::Region}.amazonaws.com"
            Id: !Sub "S3-${FrontBucket}"
            OriginPath: ""
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
          CachedMethods:
            - "HEAD"
            - "GET"
          Compress: false
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: "none"
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub "S3-${FrontBucket}"
          ViewerProtocolPolicy: "redirect-to-https"
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: "/index.html"
            ResponseCode: "200"
            ErrorCachingMinTTL: 0
        Comment: ""
        PriceClass: "PriceClass_All"
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: "TLSv1"
        # Restrictions:
        #   GeoRestriction:
        #     RestrictionType: "none"
        HttpVersion: "http2"
        DefaultRootObject: "index.html"
        IPV6Enabled: true
        Logging:
          Bucket: !Sub "${FrontBucket}.s3.${AWS::Region}.amazonaws.com"
          Prefix: log
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CategoryGetApi:
    Description: "API Gateway endpoint URL for CategoryGet function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/category_get/"
  CategoryGetFunction:
    Description: "CategoryGet Lambda Function ARN"
    Value: !GetAtt CategoryGet.Arn
  ItemListGetApi:
    Description: "API Gateway endpoint URL for ItemListGet function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/item_list_get/"
  ItemListGetFunction:
    Description: "ItemListGet Lambda Function ARN"
    Value: !GetAtt ItemListGet.Arn
  OrderPutApi:
    Description: "API Gateway endpoint URL for OrderPut function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/order_put/"
  OrderPutFunction:
    Description: "OrderPut Lambda Function ARN"
    Value: !GetAtt OrderPut.Arn
  OrderInfoGetApi:
    Description: "API Gateway endpoint URL for OrderInfoGet function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/order_info_get/"
  OrderInfoGetFunction:
    Description: "OrderPut Lambda Function ARN"
    Value: !GetAtt OrderInfoGet.Arn
  ReserveApi:
    Description: "API Gateway endpoint URL for Reserve function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/payment_reserve/"
  ReserveFunction:
    Description: "Reserve Lambda Function ARN"
    Value: !GetAtt Confirm.Arn
  ConfirmApi:
    Description: "API Gateway endpoint URL for Confirm function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/payment_confirm/"
  ConfirmFunction:
    Description: "Confirm Lambda Function ARN"
    Value: !GetAtt Confirm.Arn
  ConfirmNoLinepayApi:
    Description: "API Gateway endpoint URL for ConfirmNoLinepay function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/confirm_nolinepay/"
  ConfirmNoLinepayFunction:
    Description: "ConfirmNoLinepay Lambda Function ARN"
    Value: !GetAtt ConfirmNoLinepay.Arn
  PaymentIdGetApi:
    Description: "API Gateway endpoint URL for PaymentIdGet function"
    Value: !Sub "https://${TableOrderApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/payment_id_get/"
  PaymentIdGetFunction:
    Description: "PaymentIdGet Lambda Function ARN"
    Value: !GetAtt PaymentIdGet.Arn
  ConfirmUrl:
    Description: "LinePay Payment ConfirmUrl"
    Value: !Sub https://${CloudFrontDistribution.DomainName}/tableorder/paymentCompleted
  CancelUrl:
    Description: "LinePay Payment CancelUrl"
    Value: !Sub https://${CloudFrontDistribution.DomainName}/tableorder/
  LambdaLayer:
    Description: "Used Layer at Function"
    Value: !Join
      - ":"
      - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
        - !ImportValue TableOrderLayerDev
        - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
  LineChannelId:
    Description: "MessagingAPI LineChannelId"
    Value: !FindInMap [EnvironmentMap, !Ref Environment, LineChannelId]
  LinePayChannelId:
    Description: "ChannelId for LinePay"
    Value: !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelId]
  LinePayChannelSecret:
    Description: "ChannelSecret for LinePayChannel"
    Value: !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelSecret]
  CloudFrontDomainName:
    Description: "CloudFront for TableOrder Demo"
    Value: !GetAtt CloudFrontDistribution.DomainName
  S3:
    Description: "S3 Bucket for Frontend"
    Value: !Ref FrontBucket
